apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

dependencies {
    // Android Support
    implementation "androidx.appcompat:appcompat:$androidxAppcompatVersion"
    implementation "androidx.recyclerview:recyclerview:$androidxVersion"
    implementation "androidx.recyclerview:recyclerview-selection:$androidxVersion"
    implementation "androidx.cardview:cardview:$androidxVersion"
    implementation "com.google.android.material:material:$androidxVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.preference:preference:$androidxVersion"

    implementation "androidx.lifecycle:lifecycle-viewmodel:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$androidxLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidxLifecycleVersion"

    implementation "androidx.core:core-ktx:$androidxCoreKtxVersion"
    implementation "androidx.collection:collection-ktx:$androidxKtxVersion"
    implementation "androidx.fragment:fragment-ktx:$androidxKtxVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$androidxKtxLifecycleVersion"
    implementation "androidx.multidex:multidex:$androidxMultidexVersion"

    kapt "androidx.databinding:databinding-compiler:$androidGradlePluginVersion"

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"

    // koin
    implementation "org.koin:koin-android:$koinVersion"
    implementation "org.koin:koin-androidx-viewmodel:$koinVersion"
    implementation "org.koin:koin-androidx-scope:$koinVersion"

    // Geocaching API
    implementation("com.arcao:geocaching-api:$geocachingApiVersion") {
        // Not working in Android, slf4j-timber used instead
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'org.jetbrains', module: 'annotations-java5'
    }

    // Locus API
    implementation("com.asamm:locus-api-android:$locusApiAndroidVersion") {
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib-jdk8'
    }

    // Logging API
    implementation "com.arcao:slf4j-timber:$slf4jTimberVersion"
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // ScribeJava
    implementation "com.github.scribejava:scribejava-core:$scribejavaVersion"
    implementation("com.github.scribejava:scribejava-httpclient-okhttp:$scribejavaVersion") {
        // exclude incompatible OkHttp library, use 3.12.x version instead
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    // Material dialogs
    implementation "com.afollestad.material-dialogs:core:$materialDialogsVersion"

    // Crashlytics & Firebase
    implementation "com.google.firebase:firebase-core:$firebaseVersion"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion"

    // Networking
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries preDexEnabled && !isTravis
    }

    defaultConfig {
        applicationId 'com.arcao.geocaching4locus'
        archivesBaseName = parent.name

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        versionName rootProject.versionName
        versionCode hasProperty('devBuild') ? 1 : gitVersionCode()

        multiDexEnabled true

        aaptOptions.cruncherEnabled = false

        buildConfigField 'String', 'GIT_SHA', 'null'
        buildConfigField 'String', 'BUILD_TIME', 'null'
        buildConfigField 'String', 'GEOCACHING_API_KEY', "\"${geocachingApiKey}\""
        buildConfigField 'String', 'GEOCACHING_API_SECRET', "\"${geocachingApiSecret}\""
        buildConfigField 'boolean', 'GEOCACHING_API_STAGING', "${geocachingApiStaging}"

        buildConfigField 'String', 'TEST_USER', 'null'
        buildConfigField 'String', 'TEST_PASSWORD', 'null'

        resConfigs 'en', 'cs', 'da', 'de', 'es', 'fr', 'hr', 'it', 'nl', 'pl', 'pt', 'ru', 'sk', 'uk', 'zh', 'zh-rTW'
    }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        freeCompilerArgs += [
                "-Xuse-experimental=kotlin.Experimental",
                "-Xjvm-default=compatibility"
        ]
    }

    dataBinding {
        enabled = true
    }

    signingConfigs {
        release {
            keyAlias = 'geocaching4locus'
        }
    }

    buildTypes {
        debug {
            ext.alwaysUpdateBuildId = false
            versionNameSuffix '-dev'
            crunchPngs false
        }
        release {
            versionNameSuffix ''

            buildConfigField 'String', 'GIT_SHA', '"' + gitSha() + '"'
            buildConfigField 'String', 'BUILD_TIME', '"' + gitTimestamp() + '"'

            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            crunchPngs false

            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFiles fileTree(dir: 'proguard-rules', include: '*.pro').getFiles().toArray()
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/atomicfu.kotlin_module'
        exclude 'org/apache/http/version.properties'
        exclude 'templates/release-notes.vm'
        exclude 'log4j.xml'
    }
    lintOptions { abortOnError false }
}

androidExtensions {
    experimental = true
}

if (project.hasProperty('storeFile') &&
        project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = android.signingConfigs.debug
}

apply plugin: 'com.google.gms.google-services'