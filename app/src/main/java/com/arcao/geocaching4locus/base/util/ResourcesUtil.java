package com.arcao.geocaching4locus.base.util;

import android.content.Context;
import android.content.res.Resources;
import android.support.annotation.NonNull;
import android.support.annotation.PluralsRes;
import android.support.annotation.StringRes;
import org.oshkimaadziig.george.androidutils.SpanFormatter;

/**
 * Created by Arcao on 27.09.2016.
 */

public final class ResourcesUtil {
  private ResourcesUtil() {}

  /**
   * Returns formatted text from string resources
   * @param context application context
   * @param id string resource id
   * @param args arguments for String.format(...)
   * @return formatted SpannedString
   */
  public static CharSequence getText(@NonNull Context context, @StringRes int id, Object... args) {
    return HtmlUtil.applyFix(SpanFormatter.format(context.getResources().getConfiguration().locale, context.getText(id), args));
  }

  /**
   * Formats the string necessary for grammatically correct pluralization
   * of the given resource ID for the given quantity, using the given arguments.
   * Note that the string is selected based solely on grammatical necessity,
   * and that such rules differ between languages. Do not assume you know which string
   * will be returned for a given quantity. See
   * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
   * for more detail.
   *
   * <p>Substitution of format arguments works as if using
   * {@link java.util.Formatter} and {@link java.lang.String#format}.
   * The resulting string can be text styled.
   *
   * @param id The desired resource identifier, as generated by the aapt
   *           tool. This integer encodes the package, type, and resource
   *           entry. The value 0 is an invalid identifier.
   * @param quantity The number used to get the correct string for the current language's
   *           plural rules.
   * @param formatArgs The format arguments that will be used for substitution.
   *
   * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
   *
   * @return CharSequence The string data associated with the resource, plus
   *         possibly styled text information.
   */
  @NonNull
  public static CharSequence getQuantityText(@NonNull Context context, @PluralsRes int id, int quantity, Object... formatArgs) throws Resources.NotFoundException {
    final Resources resources = context.getResources();
    final CharSequence raw = resources.getQuantityText(id, quantity);

    return HtmlUtil.applyFix(SpanFormatter.format(resources.getConfiguration().locale, raw, formatArgs));
  }

}
