package com.arcao.geocaching4locus.base.util

import android.content.Context
import android.content.res.Resources
import androidx.annotation.NonNull
import androidx.annotation.PluralsRes
import androidx.annotation.StringRes
import androidx.core.os.ConfigurationCompat
import org.oshkimaadziig.george.androidutils.SpanFormatter
import java.util.*

object ResourcesUtil {

    /**
     * Returns formatted text from string resources
     *
     * @param context application context
     * @param id string resource id
     * @param args arguments for String.format(...)
     * @return formatted SpannedString
     */
    @JvmStatic
    fun getText(context: Context, @StringRes id: Int, vararg args: Any): CharSequence {
        return HtmlUtil.applyFix(SpanFormatter.format(getLocale(context), context.getText(id), *args))
    }

    /**
     * Formats the string necessary for grammatically correct pluralization
     * of the given resource ID for the given quantity, using the given arguments.
     * Note that the string is selected based solely on grammatical necessity,
     * and that such rules differ between languages. Do not assume you know which string
     * will be returned for a given quantity. See
     * [String Resources]({@docRoot}guide/topics/resources/string-resource.html#Plurals)
     * for more detail.
     *
     *
     *
     * Substitution of format arguments works as if using
     * [Formatter] and [String.format].
     * The resulting string can be text styled.
     *
     * @param id The desired resource identifier, as generated by the aapt
     * tool. This integer encodes the package, type, and resource
     * entry. The value 0 is an invalid identifier.
     * @param quantity The number used to get the correct string for the current language's
     * plural rules.
     * @param formatArgs The format arguments that will be used for substitution.
     * @return CharSequence The string data associated with the resource, plus
     * possibly styled text information.
     * @throws Resources.NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    @NonNull
    @Throws(Resources.NotFoundException::class)
    @JvmStatic
    fun getQuantityText(context: Context, @PluralsRes id: Int, quantity: Int, vararg formatArgs: Any): CharSequence {
        val resources = context.resources
        val raw = resources.getQuantityText(id, quantity)

        return HtmlUtil.applyFix(SpanFormatter.format(getLocale(context), raw, *formatArgs))
    }

    private fun getLocale(context: Context): Locale {
        val locales = ConfigurationCompat.getLocales(context.resources.configuration)
        return if (locales.isEmpty) {
            Locale.getDefault()
        } else {
            locales[0]
        }
    }
}

@Suppress("NOTHING_TO_INLINE")
inline fun Context.getText(@StringRes id: Int, vararg args: Any) = ResourcesUtil.getText(this, id, *args)

@Suppress("NOTHING_TO_INLINE")
inline fun Context.getQuantityText(@PluralsRes id: Int, quantity: Int, vararg formatArgs: Any) =
        ResourcesUtil.getQuantityText(this, id, quantity, *formatArgs)
