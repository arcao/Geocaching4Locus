package com.arcao.geocaching4locus.base.util;

import android.app.Service;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.PowerManager;
import android.util.SparseArray;

import com.crashlytics.android.Crashlytics;

import timber.log.Timber;

public final class ServiceUtil {
    private static final String EXTRA_WAKE_LOCK_ID = ServiceUtil.class.getCanonicalName() + ".WAKE_LOCK_ID";

    private static final SparseArray<WakeLockContainer> ACTIVE_WAKE_LOCKS = new SparseArray<>();
    private static int nextId = 1;

    private ServiceUtil() {
    }

    /**
     * Do a {@link Context#startService(Intent)
     * Context.startService}, but holding a wake lock while the service starts.
     * This will modify the Intent to hold an extra identifying the wake lock;
     * when the service receives it in {@link Service#onStartCommand
     * Service.onStartCommand}, it should pass back the Intent it receives there to
     * {@link #completeWakefulIntent(Intent)} in order to release
     * the wake lock.
     *
     * @param context The Context in which it operate.
     * @param intent  The Intent with which to start the service, as per
     *                {@link Context#startService(Intent)
     *                Context.startService}.
     */
    public static ComponentName startWakefulForegroundService(Context context, Intent intent) {
        synchronized (ACTIVE_WAKE_LOCKS) {
            int id = nextId;
            nextId++;
            if (nextId <= 0) {
                nextId = 1;
            }

            intent.putExtra(EXTRA_WAKE_LOCK_ID, id);
            ComponentName comp = Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ?
                    context.startForegroundService(intent) : context.startService(intent);

            if (comp == null) {
                return null;
            }

            PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
            if (pm == null) {
                return comp;
            }

            String tag = "wake:" + comp.flattenToShortString();
            PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, tag);
            wl.setReferenceCounted(false);
            wl.acquire(300 * 1000);
            ACTIVE_WAKE_LOCKS.put(id, new WakeLockContainer(tag, wl));
            Timber.w("Created WakeLock #%d for tag %s", id, tag);
            return comp;
        }
    }

    /**
     * Finish the execution from a previous {@link #startWakefulForegroundService}.  Any wake lock
     * that was being held will now be released.
     *
     * @param intent The Intent as originally generated by {@link #startWakefulForegroundService}.
     * @return Returns true if the intent is associated with a wake lock that is
     * now released; returns false if there was no wake lock specified for it.
     */
    public static boolean completeWakefulIntent(Intent intent) {
        final int id = intent.getIntExtra(EXTRA_WAKE_LOCK_ID, 0);
        if (id == 0) {
            return false;
        }
        synchronized (ACTIVE_WAKE_LOCKS) {
            WakeLockContainer container = ACTIVE_WAKE_LOCKS.get(id);
            if (container != null) {
                container.wakeLock.release();
                ACTIVE_WAKE_LOCKS.remove(id);
                Timber.w("Released WakeLock #%d", id);
                Timber.w("Remaining WakeLocks: %d", ACTIVE_WAKE_LOCKS.size());
                return true;
            }
            // We return true whether or not we actually found the wake lock
            // the return code is defined to indicate whether the Intent contained
            // an identifier for a wake lock that it was supposed to match.
            // We just log a warning here if there is no wake lock found, which could
            // happen for example if this function is called twice on the same
            // intent or the process is killed and restarted before processing the intent.
            Timber.w("No active wake lock id #%d", id);
            return true;
        }
    }

    public static void releaseAllWakeLocks(ComponentName component) {
        String tag = "wake:" + component.flattenToShortString();

        Timber.w("Releasing all WakeLocks for: %s", component.flattenToShortString());

        int releasedCounter = 0;

        synchronized (ACTIVE_WAKE_LOCKS) {
            for (int i = 0; i < ACTIVE_WAKE_LOCKS.size(); i++) {
                int id = ACTIVE_WAKE_LOCKS.keyAt(i);
                WakeLockContainer container = ACTIVE_WAKE_LOCKS.get(id);
                if (!tag.equals(container.tag)) {
                    continue;
                }

                container.wakeLock.release();
                ACTIVE_WAKE_LOCKS.remove(id);
                Timber.e("Released forgotten WakeLock #%d", id);
                releasedCounter++;
            }

            Timber.w("Remaining WakeLocks: %d", ACTIVE_WAKE_LOCKS.size());
        }

        if (releasedCounter > 0) {
            Crashlytics.logException(new IllegalStateException("Not all WakeLocks are released for tag " + tag));
        }
    }

    private static final class WakeLockContainer {
        final String tag;
        final PowerManager.WakeLock wakeLock;

        WakeLockContainer(String tag, PowerManager.WakeLock wakeLock) {
            this.tag = tag;
            this.wakeLock = wakeLock;
        }
    }
}
