package com.arcao.geocaching4locus.base.util

import android.app.Service
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.PowerManager
import android.util.SparseArray
import androidx.core.util.forEach

import timber.log.Timber

object ServiceUtil {
    private const val EXTRA_WAKE_LOCK_ID = "ServiceUtil.WAKE_LOCK_ID"
    private val ACTIVE_WAKE_LOCKS = SparseArray<WakeLockContainer>()
    private var nextId = 1

    /**
     * Do a [ Context.startService][Context.startService], but holding a wake lock while the service starts.
     * This will modify the Intent to hold an extra identifying the wake lock;
     * when the service receives it in [ Service.onStartCommand][Service.onStartCommand], it should pass back the Intent it receives there to
     * [.completeWakefulIntent] in order to release
     * the wake lock.
     *
     * @param context The Context in which it operate.
     * @param intent The Intent with which to start the service, as per
     * [                Context.startService][Context.startService].
     */
    @JvmStatic
    fun startWakefulForegroundService(context: Context, intent: Intent): ComponentName? {
        synchronized(ACTIVE_WAKE_LOCKS) {
            val id = nextId
            nextId++
            if (nextId <= 0) {
                nextId = 1
            }

            intent.putExtra(EXTRA_WAKE_LOCK_ID, id)

            val comp = (if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O)
                context.startForegroundService(intent)
            else
                context.startService(intent)) ?: return null

            val pm = context.getSystemService(Context.POWER_SERVICE) as PowerManager

            val tag = "wake:${comp.flattenToShortString()}"
            val wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, tag).apply {
                setReferenceCounted(false)
                acquire((300 * 1000).toLong())
            }

            ACTIVE_WAKE_LOCKS.put(id, WakeLockContainer(tag, wl))
            Timber.w("Created WakeLock #%d for tag %s", id, tag)

            return comp
        }
    }

    /**
     * Finish the execution from a previous [.startWakefulForegroundService].  Any wake lock
     * that was being held will now be released.
     *
     * @param intent The Intent as originally generated by [.startWakefulForegroundService].
     * @return Returns true if the intent is associated with a wake lock that is
     * now released; returns false if there was no wake lock specified for it.
     */
    @JvmStatic
    fun completeWakefulIntent(intent: Intent): Boolean {
        val id = intent.getIntExtra(EXTRA_WAKE_LOCK_ID, 0)
        if (id == 0) {
            return false
        }
        synchronized(ACTIVE_WAKE_LOCKS) {
            val container = ACTIVE_WAKE_LOCKS.get(id)
            container?.apply {
                wakeLock.release()
                ACTIVE_WAKE_LOCKS.remove(id)
                Timber.w("Released WakeLock #%d", id)
                Timber.w("Remaining WakeLocks: %d", ACTIVE_WAKE_LOCKS.size())
                return true
            }

            // We return true whether or not we actually found the wake lock
            // the return code is defined to indicate whether the Intent contained
            // an identifier for a wake lock that it was supposed to match.
            // We just log a warning here if there is no wake lock found, which could
            // happen for example if this function is called twice on the same
            // intent or the process is killed and restarted before processing the intent.
            Timber.w("No active wake lock id #%d", id)
            return true
        }
    }

    @JvmStatic
    fun releaseAllWakeLocks(component: ComponentName) {
        val tag = "wake:${component.flattenToShortString()}"

        Timber.w("Releasing all WakeLocks for: %s", component.flattenToShortString())

        synchronized(ACTIVE_WAKE_LOCKS) {
            ACTIVE_WAKE_LOCKS.clone().forEach { id, container ->
                if (tag != container.tag) {
                    return
                }

                container.wakeLock.release()
                ACTIVE_WAKE_LOCKS.remove(id)
                Timber.e("Released forgotten WakeLock #%d", id)
            }

            Timber.w("Remaining WakeLocks: %d", ACTIVE_WAKE_LOCKS.size())
        }
    }

    private class WakeLockContainer internal constructor(
        internal val tag: String,
        internal val wakeLock: PowerManager.WakeLock
    )
}
