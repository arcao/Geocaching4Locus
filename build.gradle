// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript { 
    apply from: 'versions.gradle'

    ext.isTravis = 'true' == System.getenv('TRAVIS')
    ext.preDexEnabled = 'true' == System.getProperty('pre-dex', 'true')

    ext.gitSha = {
        return 'git rev-parse --short HEAD'.execute([], rootDir).text.trim()
    }

    ext.gitTimestamp = {
        return  'git log -n 1 --format=%aI'.execute([], rootDir).text.trim()
    }

    ext.gitVersionCode = {
        return 'git rev-list --count HEAD'.execute([], rootDir).text.trim().toInteger()
    }

    // set Geocaching API staging key and secret if production key and secret is not set
    // Note: Staging server is slow and not for production use!!!!
    if (!project.hasProperty('geocachingApiKey')) {
        ext.geocachingApiKey = '9C7552E1-3C04-4D04-A395-230D8931E494'
    }
    if (!project.hasProperty('geocachingApiSecret')) {
        ext.geocachingApiSecret = 'DA7CC147-7B5B-4423-BCB4-D0C03E2BF685'
    }
    if (!project.hasProperty('geocachingApiStaging')) {
        ext.geocachingApiStaging = true
    }

    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android\\..*")
                includeGroupByRegex("com\\.google\\..*")
                includeGroupByRegex("androidx\\..*")
                includeGroupByRegex("android\\.arch\\..*")
            }
        }
        maven {
            url 'https://maven.fabric.io/public'
            content {
                includeGroupByRegex("com\\.crashlytics\\..*")
                includeGroupByRegex("io\\.fabric\\..*")
            }
        }
        mavenCentral()
        jcenter()
        maven {
            url "https://kotlin.bintray.com/kotlinx/"
        }
    }

    dependencies {
        // remove after update AGP
        classpath 'com.android.tools:r8:1.4.93'  // Must be before the Gradle Plugin for Android
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.ben-manes:gradle-versions-plugin:$gradleVersionsPluginVersion"
        classpath "com.google.gms:google-services:$googleServicesPluginVersion"
        classpath "io.fabric.tools:gradle:$fabricIoPluginVersion"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:$androidJunit5Version"
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply from: "$rootDir/ktlint.gradle"

    repositories {
        google {
            content {
                includeGroupByRegex("com\\.android\\..*")
                includeGroupByRegex("com\\.google\\..*")
                includeGroupByRegex("androidx\\..*")
                includeGroupByRegex("android\\.arch\\..*")
            }
        }
        maven {
            url 'https://maven.fabric.io/public'
            content {
                includeGroupByRegex("com\\.crashlytics\\..*")
                includeGroupByRegex("io\\.fabric\\..*")
            }
        }
        maven {
            url 'https://maven.arcao.com'
            content {
                includeModule 'com.arcao', 'geocaching-api'
                includeModule 'com.arcao', 'parent'
            }
        }

        // for Locus API
        maven {
            url "https://dl.bintray.com/asammsoft/maven/"
            content {
                includeGroupByRegex("com\\.asamm\\..*")
            }
        }

        mavenCentral()
        jcenter()
    }

    // dependencyUpdates: suggest only released artifacts
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc'].any { selection.candidate.version ==~ /(?i).*[.-]${it}.*/ }
                if (rejected)
                    selection.reject('Alpha builds')
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
