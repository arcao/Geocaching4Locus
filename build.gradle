// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext.isTravis = 'true' == System.getenv('TRAVIS')
    ext.preDexEnabled = 'true' == System.getProperty('pre-dex', 'true')

    ext.gitSha = {
        return 'git rev-parse --short HEAD'.execute([], rootDir).text.trim()
    }

    ext.gitTimestamp = {
        return  'git log -n 1 --format=%aI'.execute([], rootDir).text.trim()
    }

    ext.gitVersionCode = {
        return 'git rev-list --count HEAD'.execute([], rootDir).text.trim().toInteger()
    }

    // set Geocaching API staging key and secret if production key and secret is not set
    // Note: Staging server is slow and not for production use!!!!
    if (!project.hasProperty('geocachingApiKey')) {
        ext.geocachingApiKey = '9C7552E1-3C04-4D04-A395-230D8931E494'
    }
    if (!project.hasProperty('geocachingApiSecret')) {
        ext.geocachingApiSecret = 'DA7CC147-7B5B-4423-BCB4-D0C03E2BF685'
    }
    if (!project.hasProperty('geocachingApiStaging')) {
        ext.geocachingApiStaging = true
    }

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }

        // for kotlin 1.3 RC-1
        maven { url "https://kotlin.bintray.com/kotlin-eap" }
    }
    dependencies {
        classpath BuildDeps.android_gradle_plugin
        classpath BuildDeps.kotlin_gradle_plugin
        classpath BuildDeps.gradle_versions_plugin
        classpath BuildDeps.google_services_plugin
        classpath BuildDeps.fabric_io_plugin
    }
}

allprojects {
    apply plugin: 'com.github.ben-manes.versions'
    apply from: "$rootDir/ktlint.gradle"

    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://maven.arcao.com' }

        // for kotlin 1.3 RC-1
        maven { url "https://kotlin.bintray.com/kotlin-eap" }

        // for butterknife
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    // dependencyUpdates: suggest only released artifacts
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha'].any { selection.candidate.version ==~ /(?i).*[.-]${it}.*/ }
                if (rejected)
                    selection.reject('Alpha builds')
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}